import logging
{% if cookiecutter.plugin_options %}from pprint import pformat{% endif %}
from typing import Any, Dict

from agentpluginapi import (
    PayloadResult,
    IAgentEventPublisher,
    LocalMachineInfo,
)
from monkeytypes import AgentID, Event, SocketAddress
{% if cookiecutter.plugin_options %}
from .{{ cookiecutter.__plugin_name }}_options import {{ cookiecutter.__plugin_options_class }}

logger = logging.getLogger(__name__){% endif %}


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str = "",
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        island_server_address: SocketAddress
        local_machine_info: LocalMachineInfo,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._island_server_address = island_server_address
        self._local_machine_info = local_machine_info

    def run(
        self,
        *,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> PayloadResult:{% if cookiecutter.plugin_options %}
        try:
            logger.debug("Parsing options: {pformat(options)}")
            {{ cookiecutter.__plugin_name }}_options = {{ cookiecutter.__plugin_options_class }}(**options)
        except Exception as err:
            msg = f"Error parsing options: {err}"
            logger.error(msg)
            return PayloadResult(success=False, error_message=msg){% endif %}
        
        # YOUR PLUGIN CODE GOES HERE
        
        # Configure return based on your plugin results
        return PayloadResult(success=True)
